{"componentChunkName":"component---src-templates-docs-tsx","path":"/docs/request-cn","result":{"data":{"markdownRemark":{"html":"<h2 id=\"简介\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E4%BB%8B\" aria-label=\"简介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简介</h2>\n<p>对于中后台应用来说，很大一部分工作就在于请求后端的 CRUD 的接口，为进一步<strong>降低用户对请求层的感知</strong>，我们移除了默认生成的 utils/request.ts 文件，改成通过<strong>配置化</strong>的方式暴露给开发者做请求的配置和增强处理；同时通过业务总结出一套标准的<strong>接口结构规范</strong>，并<strong>提供统一的接口解析、错误处理</strong>的能力；后续将持续完善可配置项、提供垂直场景如列表、登录失效等解决方案。</p>\n<p>同时我们内置了一个 useRequest 的 Hook 来封装一些常见的处理数据的逻辑，通过它你可以更加简单的实现相关功能。</p>\n<h2 id=\"如何使用\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\" aria-label=\"如何使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用</h2>\n<h3 id=\"使用-request\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-request\" aria-label=\"使用 request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 request</h3>\n<p>通过 <code>import { request } from 'umi';</code> 你可以使用内置的请求方法。 <a href=\"https://umijs.org/plugins/plugin-request#request\">request</a> 接收两个参数，第一个参数是 url，第二个参数是请求的 options。options 具体格式参考 umi-request。</p>\n<p><a href=\"https://umijs.org/plugins/plugin-request#request\">request</a> 的大部分用法等同于 umi-request，一个不同的是 options 扩展了一个配置 skipErrorHandler，该配置为 true 是会跳过默认的错误处理，用于项目中部分特殊的接口。</p>\n<p>示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  skipErrorHandler<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"使用-userequest\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-userequest\" aria-label=\"使用 userequest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 useRequest</h3>\n<p>useRequest 是最佳实践中内置的一个 Hook，通过它你可以获得强大的请求接口的能力，不管是翻页还是加载更多还是和 antd 的 Table 容易许多。一个最简单的示例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRequest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'umi'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> loading <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> services<span class=\"token punctuation\">.</span><span class=\"token function\">getUserList</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中 useRequest 的第一个参数接收一个 function，该 function 需要返回一个 Promise，如果你接入了 OneAPI 那么 OneAPI 自动生成的 services 就是一个个这样的 function。</p>\n<p>该 Hook 的返回中暴露了各项值，然后你就可以消费它们了，该 Hook 返回的 data 是后端实际返回 JSON 数据中的 data 字段，方便使用（当然你也可以通过配置修改）。更多关于 useRequest 的用法参考它的 <a href=\"https://umijs.org/plugins/plugin-request#userequest\">API 文档</a>。</p>\n<!-- ### 中间件 -->\n<h2 id=\"中间件--拦截器\" style=\"position:relative;\"><a href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6--%E6%8B%A6%E6%88%AA%E5%99%A8\" aria-label=\"中间件  拦截器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>中间件 &#x26; 拦截器</h2>\n<p>在某些情况下我们需要在网络请求发出前或响应后做一些特殊处理。比如，在每次请求前在 Header 内自动加上对应的 Access Token。</p>\n<p><a href=\"https://umijs.org/plugins/plugin-request#responseinterceptors\">@umijs/plugin-request</a> 提供了三个运行时配置项来帮助我们完成类似需求。</p>\n<h3 id=\"中间件：middlewares\" style=\"position:relative;\"><a href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9Amiddlewares\" aria-label=\"中间件：middlewares permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>中间件：middlewares</h3>\n<p>中间件和拦截器一样，同样可以让开发者优雅地做网络请求前后的增强处理。但是用起来稍复杂，推荐优先使用拦截器。</p>\n<p>示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/app.ts</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">demo1Middleware</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'response1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">demo2Middleware</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'response2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> request<span class=\"token operator\">:</span> RequestConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  errorHandler<span class=\"token punctuation\">,</span>\n  middlewares<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>demo1Middleware<span class=\"token punctuation\">,</span> demo2Middleware<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>执行顺序如下：</p>\n<blockquote>\n<p>request1 -> request2 -> response -> response2 -> response1</p>\n</blockquote>\n<p>强烈建议你再细看一下 <a href=\"https://github.com/umijs/umi-request\">umi-request</a> 关于 <a href=\"https://github.com/umijs/umi-request/blob/master/README_zh-CN.md#%E4%B8%AD%E9%97%B4%E4%BB%B6\">中间件的文档</a>。</p>\n<h3 id=\"请求前拦截：requestinterceptors\" style=\"position:relative;\"><a href=\"#%E8%AF%B7%E6%B1%82%E5%89%8D%E6%8B%A6%E6%88%AA%EF%BC%9Arequestinterceptors\" aria-label=\"请求前拦截：requestinterceptors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>请求前拦截：requestInterceptors</h3>\n<p>在网络请求的 <code>.then</code> 或 <code>catch</code> 处理前拦截，你可以在 <code>src/app.ts</code> 网络请求配置内增加如下配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> request<span class=\"token operator\">:</span> RequestConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  errorHandler<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 新增自动添加AccessToken的请求前拦截器</span>\n  requestInterceptors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>authHeaderInterceptor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code>requestInterceptors</code> 接收一个数组，数组的每一项为一个 request 拦截器。等同于 umi-request 的 <code>request.interceptors.request.use()</code> 。</p>\n<p>拦截器示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/app.ts</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">authHeaderInterceptor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> RequestOptionsInit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> Authorization<span class=\"token operator\">:</span> <span class=\"token string\">'Bearer xxxxxx'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    url<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>options<span class=\"token punctuation\">,</span> interceptors<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">:</span> authHeader <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更具体内容见 <a href=\"https://github.com/umijs/umi-request\">umi-request</a> 的 <a href=\"(https://github.com/umijs/umi-request#interceptor)\">拦截器文档</a>。</p>\n<h3 id=\"响应后拦截：responseinterceptors\" style=\"position:relative;\"><a href=\"#%E5%93%8D%E5%BA%94%E5%90%8E%E6%8B%A6%E6%88%AA%EF%BC%9Aresponseinterceptors\" aria-label=\"响应后拦截：responseinterceptors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>响应后拦截：responseInterceptors</h3>\n<p>在网络请求响应的 <code>.then</code> 或 <code>catch</code> 处理前拦截处理，使用方法基本和 <a href=\"request-cn#%E8%AF%B7%E6%B1%82%E5%89%8D%E6%8B%A6%E6%88%AA%EF%BC%9Arequestinterceptors\">requestInterceptors</a> 相同。</p>\n<p>具体示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// src/app.ts</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">demoResponseInterceptors</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">,</span> options<span class=\"token operator\">:</span> RequestOptionsInit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'interceptors'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yes yo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> request<span class=\"token operator\">:</span> RequestConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  errorHandler<span class=\"token punctuation\">,</span>\n  responseInterceptors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>demoResponseInterceptors<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"统一规范\" style=\"position:relative;\"><a href=\"#%E7%BB%9F%E4%B8%80%E8%A7%84%E8%8C%83\" aria-label=\"统一规范 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>统一规范</h2>\n<h3 id=\"统一错误处理\" style=\"position:relative;\"><a href=\"#%E7%BB%9F%E4%B8%80%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\" aria-label=\"统一错误处理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>统一错误处理</h3>\n<p>接口请求并不一定是 100% 成功的，但是正常情况下我们预期接口都是成功的，只有网络异常或者权限等问题的情况下才会出现接口请求失败。所以我们通常期望的是代码逻辑只需要考虑成功的情况，对于异常情况只要在一个地方统一处理即可。</p>\n<p>在最佳实践中，我们定义了一套接口格式和错误处理的规范，当失败时会统一提示错误，代码只需要考虑成功即可。你可以使用 <code>import { request } from 'umi';</code>  来使用最佳实践内置的请求方法来获得该能力。</p>\n<p>默认的接口格式为：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">response</span> <span class=\"token punctuation\">{</span>\n  success<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// if request is success</span>\n  data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// response data</span>\n  errorCode<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// code for errorType</span>\n  errorMessage<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// message display to user</span>\n  showType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error display type： 0 silent; 1 message.warn; 2 message.error; 4 notification; 9 page</span>\n  traceId<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Convenient for back-end Troubleshooting: unique request ID</span>\n  host<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// onvenient for backend Troubleshooting: host of current access server</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然你也可以通过 <code>app.ts</code>  中暴露的 <code>request</code>  的运行时配置来修改或者自定义自己项目的一些逻辑，具体参考 <code>@umijs/plugin-request</code>  的<a href=\"https://umijs.org/plugins/plugin-request\">文档</a>。</p>\n<p>当出现 HTTP 错误或者返回的数据中 <code>success</code>  为 <code>false</code>  的情况下 request 会抛出一个异常，当你使用 useRequest 的时候该异常会被 useRequest 捕获，大部分情况下你不需要关心异常的情况，统一的错误处理会做统一的错误提示。对于部分场景需要手动处理错误的时候你可以通过 useRequest 暴露的 <code>onError</code>  方法或者 <code>error</code>  对象来做自定义处理。</p>\n<h3 id=\"统一接口规范\" style=\"position:relative;\"><a href=\"#%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83\" aria-label=\"统一接口规范 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>统一接口规范</h3>\n<p>除了上面错误处理所定义的最外层的规范以外，对于 <code>data</code>  内的数据格式我们也提供了一套规范。对于分页场景来说我们推荐后端采用如下的格式，这样前端可以很简单的和 antd 的 Table 组件对接，当然，如果后端不是这个格式也可以使用 <code>useRequest</code> Hook 的 <code>formatResult</code>  配置来做转换。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n   list<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   current<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n   pageSize<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n   total<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"参考：后端接口规范建议\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%EF%BC%9A%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE\" aria-label=\"参考：后端接口规范建议 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考：后端接口规范建议</h2>\n<p>为了最后部署的时候能够区分页面和接口，同时也是为了方便前端调试做接口的转发，我们推荐后端接口路径统一添加 <code>/api</code>  的前缀。</p>\n<p>另外接口的返回格式建议参考统一的接口规范，方便做统一的错误处理，示例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"success\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errorCode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errorMessage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error message\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"showType\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"traceId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"someid\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10.1.1.1\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于简单的可以如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"success\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errorMessage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error message\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>具体参考上面的统一错误处理和统一接口规范。</p>\n<p>如果后端返回格式不符合规范的可以参考 <code>@umijs/plugin-request</code> 的<a href=\"https://umijs.org/plugins/plugin-request\">文档</a>，配置运行时配置中的 <code>errorConfig.adaptor</code> 兼容。</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/request-cn/#%E7%AE%80%E4%BB%8B\">简介</a></li>\n<li>\n<p><a href=\"/docs/request-cn/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">如何使用</a></p>\n<ul>\n<li><a href=\"/docs/request-cn/#%E4%BD%BF%E7%94%A8-request\">使用 request</a></li>\n<li><a href=\"/docs/request-cn/#%E4%BD%BF%E7%94%A8-userequest\">使用 useRequest</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/docs/request-cn/#%E4%B8%AD%E9%97%B4%E4%BB%B6--%E6%8B%A6%E6%88%AA%E5%99%A8\">中间件 &#x26; 拦截器</a></p>\n<ul>\n<li><a href=\"/docs/request-cn/#%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%9Amiddlewares\">中间件：middlewares</a></li>\n<li><a href=\"/docs/request-cn/#%E8%AF%B7%E6%B1%82%E5%89%8D%E6%8B%A6%E6%88%AA%EF%BC%9Arequestinterceptors\">请求前拦截：requestInterceptors</a></li>\n<li><a href=\"/docs/request-cn/#%E5%93%8D%E5%BA%94%E5%90%8E%E6%8B%A6%E6%88%AA%EF%BC%9Aresponseinterceptors\">响应后拦截：responseInterceptors</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/docs/request-cn/#%E7%BB%9F%E4%B8%80%E8%A7%84%E8%8C%83\">统一规范</a></p>\n<ul>\n<li><a href=\"/docs/request-cn/#%E7%BB%9F%E4%B8%80%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\">统一错误处理</a></li>\n<li><a href=\"/docs/request-cn/#%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83\">统一接口规范</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/request-cn/#%E5%8F%82%E8%80%83%EF%BC%9A%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%E5%BB%BA%E8%AE%AE\">参考：后端接口规范建议</a></li>\n</ul>","frontmatter":{"title":"网络请求","order":31,"type":"后端集成"},"fields":{"path":"/docs/request.zh-CN.md","slug":"/docs/request-cn","modifiedTime":1619403946742,"avatarList":"[]"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"设计资源","order":94,"type":"其它","time":null},"fields":{"slug":"/docs/resource-cn","path":"/docs/resource.zh-CN.md"}}},{"node":{"frontmatter":{"title":"升级到 V5","order":92,"type":"其它","time":null},"fields":{"slug":"/docs/upgrade-v5-cn","path":"/docs/upgrade-v5.zh-CN.md"}}},{"node":{"frontmatter":{"title":"常见问题","order":91,"type":"其它","time":null},"fields":{"slug":"/docs/faq-cn","path":"/docs/faq.zh-CN.md"}}},{"node":{"frontmatter":{"title":"添加图片，字体和文件","order":44,"type":"样式和资源","time":null},"fields":{"slug":"/docs/adding-images-fonts-and-files-cn","path":"/docs/adding-images-fonts-and-files.zh-CN.md"}}},{"node":{"frontmatter":{"title":"调试","order":34,"type":"后端集成","time":null},"fields":{"slug":"/docs/debug-cn","path":"/docs/debug.zh-CN.md"}}},{"node":{"frontmatter":{"title":"使用 less","order":33,"type":"样式和资源","time":null},"fields":{"slug":"/docs/less-cn","path":"/docs/less.zh-CN.md"}}},{"node":{"frontmatter":{"title":"代理","order":32,"type":"后端集成","time":null},"fields":{"slug":"/docs/proxy-cn","path":"/docs/proxy.zh-CN.md"}}},{"node":{"frontmatter":{"title":"部署","order":32,"type":"构建和部署","time":null},"fields":{"slug":"/docs/deploy-cn","path":"/docs/deploy.zh-CN.md"}}},{"node":{"frontmatter":{"title":"CSS Modules","order":32,"type":"样式和资源","time":null},"fields":{"slug":"/docs/css-modules-cn","path":"/docs/css-modules.zh-CN.md"}}},{"node":{"frontmatter":{"title":"菜单的高级用法","order":32,"type":"高级使用","time":null},"fields":{"slug":"/docs/advanced-menu-cn","path":"/docs/advanced-menu.zh-CN.md"}}},{"node":{"frontmatter":{"title":"测试","order":32,"type":"高级使用","time":null},"fields":{"slug":"/docs/test-cn","path":"/docs/test.zh-CN.md"}}},{"node":{"frontmatter":{"title":"网络请求","order":31,"type":"后端集成","time":null},"fields":{"slug":"/docs/request-cn","path":"/docs/request.zh-CN.md"}}},{"node":{"frontmatter":{"title":"构建","order":31,"type":"构建和部署","time":null},"fields":{"slug":"/docs/build-cn","path":"/docs/build.zh-CN.md"}}},{"node":{"frontmatter":{"title":"Lint","order":31,"type":"编码规范","time":null},"fields":{"slug":"/docs/lint-cn","path":"/docs/lint.zh-CN.md"}}},{"node":{"frontmatter":{"title":"TypeScript","order":31,"type":"编码规范","time":null},"fields":{"slug":"/docs/type-script-cn","path":"/docs/typeScript.zh-CN.md"}}},{"node":{"frontmatter":{"title":"国际化","order":31,"type":"高级使用","time":null},"fields":{"slug":"/docs/i18n-cn","path":"/docs/i18n.zh-CN.md"}}},{"node":{"frontmatter":{"title":"OpenAPI","order":30,"type":"后端集成","time":null},"fields":{"slug":"/docs/openapi-cn","path":"/docs/openapi.zh-CN.md"}}},{"node":{"frontmatter":{"title":"标题和加载页","order":30,"type":"构建和部署","time":null},"fields":{"slug":"/docs/title-landing-cn","path":"/docs/title-landing.zh-CN.md"}}},{"node":{"frontmatter":{"title":"使用 css","order":30,"type":"样式和资源","time":null},"fields":{"slug":"/docs/css-cn","path":"/docs/css.zh-CN.md"}}},{"node":{"frontmatter":{"title":"Pro 资产的使用","order":30,"type":"高级使用","time":null},"fields":{"slug":"/docs/assets-cn","path":"/docs/assets.zh-CN.md"}}},{"node":{"frontmatter":{"title":"文件夹结构","order":21,"type":"基础使用","time":null},"fields":{"slug":"/docs/folder-cn","path":"/docs/folder.zh-CN.md"}}},{"node":{"frontmatter":{"title":"权限管理","order":20,"type":"数据管理","time":null},"fields":{"slug":"/docs/authority-management-cn","path":"/docs/authority-management.zh-CN.md"}}},{"node":{"frontmatter":{"title":"简易数据流","order":19,"type":"数据管理","time":null},"fields":{"slug":"/docs/simple-model-cn","path":"/docs/simple-model.zh-CN.md"}}},{"node":{"frontmatter":{"title":"全局初始数据","order":18,"type":"数据管理","time":null},"fields":{"slug":"/docs/initial-state-cn","path":"/docs/initial-state.zh-CN.md"}}},{"node":{"frontmatter":{"title":"新增页面","order":16,"type":"页面开发","time":null},"fields":{"slug":"/docs/new-page-cn","path":"/docs/new-page.zh-CN.md"}}},{"node":{"frontmatter":{"title":"图表","order":15,"type":"页面开发","time":null},"fields":{"slug":"/docs/graph-cn","path":"/docs/graph.zh-CN.md"}}},{"node":{"frontmatter":{"title":"自定义布局","order":15,"type":"页面开发","time":null},"fields":{"slug":"/docs/my-layout-cn","path":"/docs/my-layout.zh-CN.md"}}},{"node":{"frontmatter":{"title":"路由和菜单","order":15,"type":"页面开发","time":null},"fields":{"slug":"/docs/router-and-nav-cn","path":"/docs/router-and-nav.zh-CN.md"}}},{"node":{"frontmatter":{"title":"环境变量","order":11,"type":"基础使用","time":null},"fields":{"slug":"/docs/environment-manage-cn","path":"/docs/environment-manage.zh-CN.md"}}},{"node":{"frontmatter":{"title":"启动项目","order":10,"type":"基础使用","time":null},"fields":{"slug":"/docs/development-cn","path":"/docs/development.zh-CN.md"}}},{"node":{"frontmatter":{"title":"内置布局","order":10,"type":"页面开发","time":null},"fields":{"slug":"/docs/layout-cn","path":"/docs/layout.zh-CN.md"}}},{"node":{"frontmatter":{"title":"新手需知","order":4,"type":"入门","time":null},"fields":{"slug":"/docs/introduction-cn","path":"/docs/introduction.zh-CN.md"}}},{"node":{"frontmatter":{"title":"开始使用","order":3,"type":"入门","time":null},"fields":{"slug":"/docs/getting-started-cn","path":"/docs/getting-started.zh-CN.md"}}},{"node":{"frontmatter":{"title":"文档总览","order":0,"type":"入门","time":null},"fields":{"slug":"/docs/overview-cn","path":"/docs/overview.zh-CN.md"}}}]}},"pageContext":{"slug":"/docs/request-cn","type":"/docs/","locale":"/-cn/"}},"staticQueryHashes":[]}