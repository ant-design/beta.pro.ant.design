{"componentChunkName":"component---src-templates-docs-tsx","path":"/docs/authority-management-cn","result":{"data":{"markdownRemark":{"html":"<h2 id=\"一、简介\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E3%80%81%E7%AE%80%E4%BB%8B\" aria-label=\"一、简介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一、简介</h2>\n<p>在项目中经常有的场景是不同的用户的权限不同，通常有如下场景：</p>\n<ul>\n<li>不同的用户在页面中可以看到的元素和操作不同</li>\n<li>不同的用户对页面的访问权限不同</li>\n</ul>\n<blockquote>\n<p>针对这些场景，我们为中台场景下常用的权限控制提供了一种更加简单、易用、通用的解决方案。实现了一个基于 umi 插件的权限管理方案 - <a href=\"https://umijs.org/plugins/plugin-access\">@umijs/plugin-access</a>。通过定义权限，使用权限，完成 <strong>React 组件内的执行权限控制，渲染权限控制。</strong>搭配 <a href=\"https://umijs.org/plugins/plugin-layout\">@alipay/umi-plugin-layout</a> 插件一起使用，还可以进一步完成对<strong>路由权限</strong>的控制。</p>\n</blockquote>\n<h2 id=\"二、如何使用\" style=\"position:relative;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\" aria-label=\"二、如何使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二、如何使用</h2>\n<h3 id=\"初始化\" style=\"position:relative;\"><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\" aria-label=\"初始化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>初始化</h3>\n<p>权限的定义依赖于初始数据，初始数据需要通过 <a href=\"https://umijs.org/plugins/plugin-initial-state\">@umijs/plugin-initial-state</a> 生成。</p>\n<p>生成完初始化数据后，就可以开始定义权限了。首先新建 <code>src/access.ts</code> ，在该文件中 <code>export default</code> 一个函数，定义用户拥有的权限，以下是示例定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// src/access.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    canReadFoo<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">canUpdateFoo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">canDeleteFoo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token operator\">?.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 按业务需求自己任意定义鉴权函数</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>该文件需要返回一个 function，返回的 function 会在应用初始化阶段被执行，执行后返回的对象将会被作为用户所有权限的定义。对象的每个 key 对应一个 boolean 值，只有 true 和 false，代表用户是否有该权限。</p>\n<p>其中的 <code>initialState</code>  来自于<a href=\"initial-state\">全局初始化数据</a>，你可以基于这些数据来初始化用户权限。</p>\n<h3 id=\"页面内的权限控制\" style=\"position:relative;\"><a href=\"#%E9%A1%B5%E9%9D%A2%E5%86%85%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\" aria-label=\"页面内的权限控制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>页面内的权限控制</h3>\n<p>使用示例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useAccess<span class=\"token punctuation\">,</span> Access <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'umi'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PageA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> access <span class=\"token operator\">=</span> <span class=\"token function\">useAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// access 实例的成员: canReadFoo, canUpdateFoo, canDeleteFoo</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">.</span>canReadFoo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 任意操作</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Access accessible<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>access<span class=\"token punctuation\">.</span>canReadFoo<span class=\"token punctuation\">}</span> fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Can not read foo content<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Foo content<span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Access<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Access accessible<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>access<span class=\"token punctuation\">.</span><span class=\"token function\">canUpdateFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Can not update foo<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Update foo<span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Access<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Access accessible<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>access<span class=\"token punctuation\">.</span><span class=\"token function\">canDeleteFoo</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Can not <span class=\"token keyword\">delete</span> foo<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Delete foo<span class=\"token punctuation\">.</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Access<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>你可以通过 <code>useAccess</code> hook 来获取权限定义，另外我们内置了 <code>Access</code>  组件用于页面的元素显示和隐藏的控制。</p>\n<h2 id=\"三、路由和菜单的权限控制\" style=\"position:relative;\"><a href=\"#%E4%B8%89%E3%80%81%E8%B7%AF%E7%94%B1%E5%92%8C%E8%8F%9C%E5%8D%95%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\" aria-label=\"三、路由和菜单的权限控制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>三、路由和菜单的权限控制</h2>\n<p>如果需要对路由还有菜单进行权限控制，可以直接在路由上原有基础配置上加上权限控制相关的属性，即可快速实现路由和菜单的权限控制。<strong>（前提需要使用最佳实践的 Layout 方案 - <a href=\"https://umijs.org/plugins/plugin-layout\">@alipay/umi-plugin-layout</a> ）</strong>。</p>\n<p>在以上定义(<code>src/access.ts</code>, <code>src/app.ts</code>)完成的基础上，再在路由配置项上添加 <code>access</code> 属性即可完成路由和菜单的权限控制。<code>access</code> 属性的值为 <code>src/access.ts</code> 中返回的对象的 key。以下为实际例子：</p>\n<p>假设权限定义文件 <code>src/access.ts</code> 内容如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// src/access.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isAdmin<span class=\"token punctuation\">,</span> hasRoutes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token function-variable function\">adminRouteFilter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> isAdmin<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 只有管理员可访问</span>\n    <span class=\"token function-variable function\">normalRouteFilter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> hasRoutes<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// initialState 中包含了的路由才有权限访问</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>通过以上示例可以看到，权限路由控制相关的函数，接收\"当前处理的路由\"作为第一个参数</p>\n</blockquote>\n<p>那么只需要按以下方式在常规路由配置中加上 <code>access</code> 这一项即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// config/config.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'umi'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// ...</span>\n      access<span class=\"token operator\">:</span> <span class=\"token string\">'normalRouteFilter'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 会调用 src/access.ts 中返回的 normalRouteFilter 进行鉴权</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/admin'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// ...</span>\n      access<span class=\"token operator\">:</span> <span class=\"token string\">'adminRouteFilter'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 会调用 src/access.ts 中返回的 adminRouteFilter 进行鉴权</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对应鉴权函数(比如 <code>adminRouteFilter</code>)在接收路由作为参数后返回值为 <code>false</code>，该条路由将会被禁用，并且从左侧 layout 菜单中移除，如果直接从 URL 访问对应路由，将看到一个 403 页面。</p>","tableOfContents":"<ul>\n<li><a href=\"/docs/authority-management-cn/#%E4%B8%80%E3%80%81%E7%AE%80%E4%BB%8B\">一、简介</a></li>\n<li>\n<p><a href=\"/docs/authority-management-cn/#%E4%BA%8C%E3%80%81%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">二、如何使用</a></p>\n<ul>\n<li><a href=\"/docs/authority-management-cn/#%E5%88%9D%E5%A7%8B%E5%8C%96\">初始化</a></li>\n<li><a href=\"/docs/authority-management-cn/#%E9%A1%B5%E9%9D%A2%E5%86%85%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\">页面内的权限控制</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/authority-management-cn/#%E4%B8%89%E3%80%81%E8%B7%AF%E7%94%B1%E5%92%8C%E8%8F%9C%E5%8D%95%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\">三、路由和菜单的权限控制</a></li>\n</ul>","frontmatter":{"title":"权限管理","order":20,"type":"基础使用"},"fields":{"path":"/docs/authority-management.zh-CN.md","slug":"/docs/authority-management-cn","modifiedTime":1596978523313,"avatarList":"[{\"username\":\"chenshuai2144\",\"url\":\"https://avatars1.githubusercontent.com/u/8186664?s=40&v=4\"},{\"username\":\"afc163\",\"url\":\"https://avatars0.githubusercontent.com/u/507615?s=40&v=4\"},{\"username\":\"xiaohuoni\",\"url\":\"https://avatars3.githubusercontent.com/u/11746742?s=40&v=4\"},{\"username\":\"srbala\",\"url\":\"https://avatars1.githubusercontent.com/u/1273137?s=40&v=4\"}]"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"设计资源","order":94,"type":"其它","time":null},"fields":{"slug":"/docs/resource-cn","path":"/docs/resource.zh-CN.md"}}},{"node":{"frontmatter":{"title":"升级到 V5","order":92,"type":"其它","time":null},"fields":{"slug":"/docs/upgrade-v5-cn","path":"/docs/upgrade-v5.zh-CN.md"}}},{"node":{"frontmatter":{"title":"常见问题","order":91,"type":"其它","time":null},"fields":{"slug":"/docs/faq-cn","path":"/docs/faq.zh-CN.md"}}},{"node":{"frontmatter":{"title":"部署","order":32,"type":"构建和部署","time":null},"fields":{"slug":"/docs/deploy-cn","path":"/docs/deploy.zh-CN.md"}}},{"node":{"frontmatter":{"title":"构建","order":31,"type":"构建和部署","time":null},"fields":{"slug":"/docs/build-cn","path":"/docs/build.zh-CN.md"}}},{"node":{"frontmatter":{"title":"Lint","order":31,"type":"编码规范","time":null},"fields":{"slug":"/docs/lint-cn","path":"/docs/lint.zh-CN.md"}}},{"node":{"frontmatter":{"title":"TypeScript","order":31,"type":"编码规范","time":null},"fields":{"slug":"/docs/type-script-cn","path":"/docs/typeScript.zh-CN.md"}}},{"node":{"frontmatter":{"title":"单元测试","order":22,"type":"高级使用","time":null},"fields":{"slug":"/docs/unit-test-cn","path":"/docs/unit-test.zh-CN.md"}}},{"node":{"frontmatter":{"title":"国际化","order":21,"type":"高级使用","time":null},"fields":{"slug":"/docs/i18n-cn","path":"/docs/i18n.zh-CN.md"}}},{"node":{"frontmatter":{"title":"权限管理","order":20,"type":"基础使用","time":null},"fields":{"slug":"/docs/authority-management-cn","path":"/docs/authority-management.zh-CN.md"}}},{"node":{"frontmatter":{"title":"简易数据流","order":19,"type":"基础使用","time":null},"fields":{"slug":"/docs/simple-model-cn","path":"/docs/simple-model.zh-CN.md"}}},{"node":{"frontmatter":{"title":"全局初始数据","order":18,"type":"基础使用","time":null},"fields":{"slug":"/docs/initial-state-cn","path":"/docs/initial-state.zh-CN.md"}}},{"node":{"frontmatter":{"title":"修改样式","order":17,"type":"基础使用","time":null},"fields":{"slug":"/docs/style-cn","path":"/docs/style.zh-CN.md"}}},{"node":{"frontmatter":{"title":"新增页面","order":16,"type":"基础使用","time":null},"fields":{"slug":"/docs/new-page-cn","path":"/docs/new-page.zh-CN.md"}}},{"node":{"frontmatter":{"title":"内置布局","order":15,"type":"基础使用","time":null},"fields":{"slug":"/docs/layout-cn","path":"/docs/layout.zh-CN.md"}}},{"node":{"frontmatter":{"title":"网络请求","order":14,"type":"基础使用","time":null},"fields":{"slug":"/docs/request-cn","path":"/docs/request.zh-CN.md"}}},{"node":{"frontmatter":{"title":"调试","order":12,"type":"基础使用","time":null},"fields":{"slug":"/docs/debug-cn","path":"/docs/debug.zh-CN.md"}}},{"node":{"frontmatter":{"title":"使用 Pro 的资产","order":11,"type":"基础使用","time":null},"fields":{"slug":"/docs/assets-cn","path":"/docs/assets.zh-CN.md"}}},{"node":{"frontmatter":{"title":"开发","order":11,"type":"基础使用","time":null},"fields":{"slug":"/docs/development-cn","path":"/docs/development.zh-CN.md"}}},{"node":{"frontmatter":{"title":"开始使用","order":1,"type":"入门","time":null},"fields":{"slug":"/docs/getting-started-cn","path":"/docs/getting-started.zh-CN.md"}}},{"node":{"frontmatter":{"title":"介绍","order":0,"type":"入门","time":null},"fields":{"slug":"/docs/introduction-cn","path":"/docs/introduction.zh-CN.md"}}}]}},"pageContext":{"slug":"/docs/authority-management-cn","type":"/docs/","locale":"/-cn/"}}}