{"componentChunkName":"component---src-templates-docs-tsx","path":"/docs/mock-api-cn","result":{"data":{"markdownRemark":{"html":"<p>Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞。</p>\n<p>在 Ant Design Pro 中，因为我们的底层框架是 umi，而它自带了代理请求功能，通过代理请求就能够轻松处理数据模拟的功能。</p>\n<h2 id=\"使用-umi-的-mock-功能\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-umi-%E7%9A%84-mock-%E5%8A%9F%E8%83%BD\" aria-label=\"使用 umi 的 mock 功能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 umi 的 mock 功能</h2>\n<p>umi 里约定 mock 文件夹下的文件即 mock 文件，文件导出接口定义，支持基于 <code>require</code> 动态分析的实时刷新，支持 ES6 语法，以及友好的出错提示，详情参看 <a href=\"https://umijs.org/guide/mock-data.html\">umijs.org</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 支持值为 Object 和 Array</span>\n  <span class=\"token string\">'GET /api/users'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> users<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// GET POST 可省略</span>\n  <span class=\"token string\">'/api/users/1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\">// 支持自定义函数，API 参考 express@4</span>\n  <span class=\"token string\">'POST /api/users/create'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当客户端（浏览器）发送请求，如：<code>GET /api/users</code>，那么本地启动的 <code>umi dev</code> 会跟此配置文件匹配请求路径以及方法，如果匹配到了，就会将请求通过配置处理，就可以像样例一样，你可以直接返回数据，也可以通过函数处理以及重定向到另一个服务器。</p>\n<p>比如定义如下映射规则：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&#39;GET /api/currentUser&#39;: {\n  name: &#39;momo.zxy&#39;,\n  avatar: imgMap.user,\n  userid: &#39;00000001&#39;,\n  notifyCount: 12,\n},</code></pre></div>\n<p>访问的本地 <code>/api/currentUser</code> 接口：</p>\n<p>请求头</p>\n<p> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/ZdlcFoYonSGDupWnktZn.png\" width=\"400\" /> </p>\n<p>返回的数据</p>\n<p> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/OLHIXePGHkkFoaZVQAts.png\" width=\"600\" /> </p>\n<h3 id=\"引入-mockts\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E5%85%A5-mockts\" aria-label=\"引入 mockts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引入 Mock.ts</h3>\n<p><a href=\"http://mockjs.com/\">Mock.ts</a> 是常用的辅助生成模拟数据的第三方库，当然你可以用你喜欢的任意库来结合 umi 构建数据模拟功能。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> mockjs <span class=\"token keyword\">from</span> <span class=\"token string\">'mockjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 使用 mockjs 等三方库</span>\n  <span class=\"token string\">'GET /api/tags'</span><span class=\"token operator\">:</span> mockjs<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'list|100'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'@city'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value|1-100'</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type|0-2'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"添加跨域请求头\" style=\"position:relative;\"><a href=\"#%E6%B7%BB%E5%8A%A0%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E5%A4%B4\" aria-label=\"添加跨域请求头 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>添加跨域请求头</h3>\n<p>设置 <code>response</code> 的请求头即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&#39;POST /api/users/create&#39;: (req, res) =&gt; {\n  ...\n  res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n  ...\n},</code></pre></div>\n<h2 id=\"合理的拆分你的-mock-文件\" style=\"position:relative;\"><a href=\"#%E5%90%88%E7%90%86%E7%9A%84%E6%8B%86%E5%88%86%E4%BD%A0%E7%9A%84-mock-%E6%96%87%E4%BB%B6\" aria-label=\"合理的拆分你的 mock 文件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>合理的拆分你的 mock 文件</h2>\n<p>对于整个系统来说，请求接口是复杂并且繁多的，为了处理大量模拟请求的场景，我们通常把每一个数据模型抽象成一个文件，统一放在 <code>mock</code> 的文件夹中，然后他们会自动被引入。</p>\n<p> <img src=\"https://gw.alipayobjects.com/zos/rmsportal/wbeiDacBkchXrTafasBy.png\" width=\"200\" /> </p>\n<h2 id=\"如何模拟延迟\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9F%E5%BB%B6%E8%BF%9F\" aria-label=\"如何模拟延迟 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何模拟延迟</h2>\n<p>为了更加真实地模拟网络数据请求，往往需要模拟网络延迟时间。</p>\n<h3 id=\"手动添加-settimeout-模拟延迟\" style=\"position:relative;\"><a href=\"#%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0-settimeout-%E6%A8%A1%E6%8B%9F%E5%BB%B6%E8%BF%9F\" aria-label=\"手动添加 settimeout 模拟延迟 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>手动添加 setTimeout 模拟延迟</h3>\n<p>你可以重写请求的代理方法，在其中添加模拟延迟的处理，如：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'POST /api/forms'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3 id=\"使用插件模拟延迟\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E6%A8%A1%E6%8B%9F%E5%BB%B6%E8%BF%9F\" aria-label=\"使用插件模拟延迟 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用插件模拟延迟</h3>\n<p>上面的方法虽然简便，但是当你需要添加所有的请求延迟的时候，可能就麻烦了，不过可以通过第三方插件来简化这个问题，如：<a href=\"https://github.com/nikogu/roadhog-api-doc/blob/master/lib/utils.ts#L5\">roadhog-api-doc#delay</a>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> delay <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'roadhog-api-doc'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'GET /api/project/notice'</span><span class=\"token operator\">:</span> getNotice<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/activities'</span><span class=\"token operator\">:</span> getActivities<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/rule'</span><span class=\"token operator\">:</span> getRule<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/tags'</span><span class=\"token operator\">:</span> mockjs<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'list|100'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'@city'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value|1-100'</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type|0-2'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/fake_list'</span><span class=\"token operator\">:</span> getFakeList<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/fake_chart_data'</span><span class=\"token operator\">:</span> getFakeChartData<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/profile/basic'</span><span class=\"token operator\">:</span> getProfileBasicData<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/profile/advanced'</span><span class=\"token operator\">:</span> getProfileAdvancedData<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'POST /api/register'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">'ok'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'GET /api/notices'</span><span class=\"token operator\">:</span> getNotices<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 调用 delay 函数，统一处理</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"联调\" style=\"position:relative;\"><a href=\"#%E8%81%94%E8%B0%83\" aria-label=\"联调 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>联调</h3>\n<p>当本地开发完毕之后，如果服务器的接口满足之前的约定，那么只需要关闭 mock 数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run start:no-mock // 不走 mock 数据</code></pre></div>\n<p>或者代理到服务端的真实接口地址即可。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> start</code></pre></div>\n<p>开启 proxy 反向代理到服务器 url：<a href=\"https://umijs.org/zh-CN/config#proxy\">https://umijs.org/zh-CN/config#proxy</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// config/config.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'/api'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'target'</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://jsonplaceholder.typicode.com/'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'changeOrigin'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'pathRewrite'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'^/api'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 Pro 中我们提取了一个 <a href=\"https://github.com/ant-design/ant-design-pro/blob/ebde795693bb6cba9ec3a1d7d5b4976d8de57f2a/config/proxy.ts\">proxy.ts</a> 统一存放代理配置。</p>\n<blockquote>\n<p>注意 proxy 配置<a href=\"https://github.com/umijs/umi/issues/1421#issuecomment-436546754\">不会改变你本地请求的 url</a>（依旧是 <a href=\"http://localhost:8000/api/xxx%EF%BC%89%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BC%9A%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E8%BD%AC%E5%8F%91%E5%88%B0\">http://localhost:8000/api/xxx），但是会在本地服务转发到</a> target 上。</p>\n</blockquote>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/docs/mock-api-cn/#%E4%BD%BF%E7%94%A8-umi-%E7%9A%84-mock-%E5%8A%9F%E8%83%BD\">使用 umi 的 mock 功能</a></p>\n<ul>\n<li><a href=\"/docs/mock-api-cn/#%E5%BC%95%E5%85%A5-mockts\">引入 Mock.ts</a></li>\n<li><a href=\"/docs/mock-api-cn/#%E6%B7%BB%E5%8A%A0%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E5%A4%B4\">添加跨域请求头</a></li>\n</ul>\n</li>\n<li><a href=\"/docs/mock-api-cn/#%E5%90%88%E7%90%86%E7%9A%84%E6%8B%86%E5%88%86%E4%BD%A0%E7%9A%84-mock-%E6%96%87%E4%BB%B6\">合理的拆分你的 mock 文件</a></li>\n<li>\n<p><a href=\"/docs/mock-api-cn/#%E5%A6%82%E4%BD%95%E6%A8%A1%E6%8B%9F%E5%BB%B6%E8%BF%9F\">如何模拟延迟</a></p>\n<ul>\n<li><a href=\"/docs/mock-api-cn/#%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0-settimeout-%E6%A8%A1%E6%8B%9F%E5%BB%B6%E8%BF%9F\">手动添加 setTimeout 模拟延迟</a></li>\n<li><a href=\"/docs/mock-api-cn/#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E6%A8%A1%E6%8B%9F%E5%BB%B6%E8%BF%9F\">使用插件模拟延迟</a></li>\n<li><a href=\"/docs/mock-api-cn/#%E8%81%94%E8%B0%83\">联调</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Mock 和联调","order":13,"type":"开发"},"fields":{"path":"/docs/mock-api.zh-CN.md","slug":"/docs/mock-api-cn","modifiedTime":1597397286245,"avatarList":"[{\"username\":\"chenshuai2144\",\"url\":\"https://avatars1.githubusercontent.com/u/8186664?s=40&v=4\"},{\"username\":\"afc163\",\"url\":\"https://avatars0.githubusercontent.com/u/507615?s=40&v=4\"},{\"username\":\"m4jing\",\"url\":\"https://avatars0.githubusercontent.com/u/2697870?s=40&v=4\"},{\"username\":\"Mikasa33\",\"url\":\"https://avatars0.githubusercontent.com/u/29498153?s=40&v=4\"}]"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"社区推荐","order":24,"type":"其他","time":null},"fields":{"slug":"/docs/from-community-cn","path":"/docs/from-community.zh-CN.md"}}},{"node":{"frontmatter":{"title":"权限管理","order":24,"type":"进阶","time":null},"fields":{"slug":"/docs/authority-management-cn","path":"/docs/authority-management.zh-CN.md"}}},{"node":{"frontmatter":{"title":"设计资源","order":23,"type":"其他","time":null},"fields":{"slug":"/docs/resource-cn","path":"/docs/resource.zh-CN.md"}}},{"node":{"frontmatter":{"title":"常见问题","order":22,"type":"入门","time":null},"fields":{"slug":"/docs/faq-cn","path":"/docs/faq.zh-CN.md"}}},{"node":{"frontmatter":{"title":"错误处理","order":17,"type":"进阶","time":null},"fields":{"slug":"/docs/error-handle-cn","path":"/docs/error-handle.zh-CN.md"}}},{"node":{"frontmatter":{"title":"UI 测试","order":15,"type":"进阶","time":null},"fields":{"slug":"/docs/ui-test-cn","path":"/docs/ui-test.zh-CN.md"}}},{"node":{"frontmatter":{"title":"区块","order":14,"type":"开发","time":null},"fields":{"slug":"/docs/block-cn","path":"/docs/block.zh-CN.md"}}},{"node":{"frontmatter":{"title":"更换主题","order":14,"type":"进阶","time":null},"fields":{"slug":"/docs/theme-cn","path":"/docs/theme.zh-CN.md"}}},{"node":{"frontmatter":{"title":"Mock 和联调","order":13,"type":"开发","time":null},"fields":{"slug":"/docs/mock-api-cn","path":"/docs/mock-api.zh-CN.md"}}},{"node":{"frontmatter":{"title":"国际化","order":13,"type":"进阶","time":null},"fields":{"slug":"/docs/i18n-cn","path":"/docs/i18n.zh-CN.md"}}},{"node":{"frontmatter":{"title":"业务图标","order":12,"type":"进阶","time":null},"fields":{"slug":"/docs/biz-icon-cn","path":"/docs/biz-icon.zh-CN.md"}}},{"node":{"frontmatter":{"title":"图表","order":11,"type":"进阶","time":null},"fields":{"slug":"/docs/graph-cn","path":"/docs/graph.zh-CN.md"}}},{"node":{"frontmatter":{"title":"引入外部模块","order":8,"type":"开发","time":null},"fields":{"slug":"/docs/import-cn","path":"/docs/import.zh-CN.md"}}},{"node":{"frontmatter":{"title":"和服务端进行交互","order":7,"type":"开发","time":null},"fields":{"slug":"/docs/server-cn","path":"/docs/server.zh-CN.md"}}},{"node":{"frontmatter":{"title":"使用 TypeScript","order":7,"type":"进阶","time":null},"fields":{"slug":"/docs/uset-typescript-cn","path":"/docs/uset-typescript.zh-CN.md"}}},{"node":{"frontmatter":{"title":"修改样式","order":6,"type":"开发","time":null},"fields":{"slug":"/docs/style-cn","path":"/docs/style.zh-CN.md"}}},{"node":{"frontmatter":{"title":"动态主题","order":5,"type":"开发","time":null},"fields":{"slug":"/docs/dynamic-theme-cn","path":"/docs/dynamic-theme.zh-CN.md"}}},{"node":{"frontmatter":{"title":"新增业务组件","order":5,"type":"开发","time":null},"fields":{"slug":"/docs/new-component-cn","path":"/docs/new-component.zh-CN.md"}}},{"node":{"frontmatter":{"title":"新增页面","order":4,"type":"开发","time":null},"fields":{"slug":"/docs/new-page-cn","path":"/docs/new-page.zh-CN.md"}}},{"node":{"frontmatter":{"title":"可用的脚本","order":3,"type":"入门","time":null},"fields":{"slug":"/docs/available-script-cn","path":"/docs/available-script.zh-CN.md"}}},{"node":{"frontmatter":{"title":"路由和菜单","order":3,"type":"开发","time":null},"fields":{"slug":"/docs/router-and-nav-cn","path":"/docs/router-and-nav.zh-CN.md"}}},{"node":{"frontmatter":{"title":"快速升级到 umi@3","order":2,"type":"入门","time":null},"fields":{"slug":"/docs/upgrade-umi3-cn","path":"/docs/upgrade-umi3.zh-CN.md"}}},{"node":{"frontmatter":{"title":"升级到 4.0 版本","order":2,"type":"入门","time":null},"fields":{"slug":"/docs/upgrade-v4-cn","path":"/docs/upgrade-v4.zh-CN.md"}}},{"node":{"frontmatter":{"title":"部署","order":2,"type":"构建和部署","time":null},"fields":{"slug":"/docs/deploy-cn","path":"/docs/deploy.zh-CN.md"}}},{"node":{"frontmatter":{"title":"开始使用（蚂蚁金服用户）","order":1,"type":"入门","time":null},"fields":{"slug":"/docs/getting-start-inner-cn","path":"/docs/getting-start-inner.zh-CN.md"}}},{"node":{"frontmatter":{"title":"布局","order":1,"type":"开发","time":null},"fields":{"slug":"/docs/layout-cn","path":"/docs/layout.zh-CN.md"}}},{"node":{"frontmatter":{"title":"构建","order":1,"type":"构建和部署","time":null},"fields":{"slug":"/docs/build-cn","path":"/docs/build.zh-CN.md"}}},{"node":{"frontmatter":{"title":"开始使用","order":0,"type":"入门","time":null},"fields":{"slug":"/docs/getting-started-cn","path":"/docs/getting-started.zh-CN.md"}}},{"node":{"frontmatter":{"title":"环境变量","order":0,"type":"构建和部署","time":null},"fields":{"slug":"/docs/environment-variables-cn","path":"/docs/environment-variables.zh-CN.md"}}}]}},"pageContext":{"slug":"/docs/mock-api-cn","type":"/docs/","locale":"/-cn/"}},"staticQueryHashes":[]}