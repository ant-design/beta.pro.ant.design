{"componentChunkName":"component---src-templates-docs-tsx","path":"/docs/openapi-cn","result":{"data":{"markdownRemark":{"html":"<p>在具体的开发中，联调永远都是比较麻烦的事情，尤其是前后端分离之后，后端一般都需要维护一份文档来告诉我们具体的 API 有什么功能，具体的字段信息，这些信息的维护成本还是相当高的。</p>\n<h2 id=\"安装插件\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6\" aria-label=\"安装插件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装插件</h2>\n<p>在 Pro 中我们引入了一个 openAPI 的插件，在脚手架中我们自带了这个功能，如果你使用的是非正式版本的 v5，可以通过下面的命令来安装这个插件。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @umijs/plugin-openapi\n\n // <span class=\"token function\">npm</span>\n <span class=\"token function\">npm</span> i @umijs/plugin-openapi --save</code></pre></div>\n<p>然后再 <code>config/config.ts</code> 中配置 openAPI 的相关配置。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"> openAPI<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    requestLibPath<span class=\"token operator\">:</span> <span class=\"token string\">\"import { request } from 'umi'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 或者使用在线的版本</span>\n    <span class=\"token comment\">// schemaPath: \"https://gw.alipayobjects.com/os/antfincdn/M%24jrzTTYJN/oneapi.json\",</span>\n    schemaPath<span class=\"token operator\">:</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'oneapi.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    mock<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>还需要再 package.json 的 scripts 中增加一个命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token string\">\"openapi\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"umi openapi\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>最后我们就可以执行 <code>npm run openapi</code> 来生成相关的接口和文档。</p>\n<h2 id=\"如何使用\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\" aria-label=\"如何使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用</h2>\n<p>openAPI 对于后端是有一些工作量的，但是工作量远远小于维护一个文档的成本，如果维护一个文档，那么每次更新完代码就需要重新编辑一遍文档。而使用 openAPI 的方式只要接入 swagger 然后做一些配置就可以生成一个界面，如果你使用的是 python 或者是 java，那么接入会变得异常简单。详细的接入步骤可以看 <a href=\"https://swagger.io/\">swagger</a> 的官方文档。这里主要介绍前端如何使用。</p>\n<p>后端接入完成 swagger 之后，我们可以访问 swagger 生成的文档，一般来说都是 <code>http://localhost:8080/swagger-ui.html</code>，访问页面我们可以拿到一个 openapi 的规范文件。</p>\n<p><img src=\"https://gw.alipayobjects.com/zos/antfincdn/c0uvca5Mx4/184D8866-6067-43DC-8395-0DC031D1A873.png\" alt=\"swagger-ui\"></p>\n<p>我们需要复制 swagger 的 url 到 openapi 的配置中,以 pro 的 openapi 为例，我们配置一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"> openAPI<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    requestLibPath<span class=\"token operator\">:</span> <span class=\"token string\">\"import { request } from 'umi'\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 这里使用 copy 的 url</span>\n    schemaPath<span class=\"token operator\">:</span> <span class=\"token string\">\"https://gw.alipayobjects.com/os/antfincdn/M%24jrzTTYJN/oneapi.json\"</span><span class=\"token punctuation\">,</span>\n    mock<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里有两个配置 <code>requestLibPath</code> 和 <code>mock</code> 需要注意一下。</p>\n<h3 id=\"requestlibpath\" style=\"position:relative;\"><a href=\"#requestlibpath\" aria-label=\"requestlibpath permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>requestLibPath</h3>\n<p><code>requestLibPath</code> 可以如何使用 <code>request</code>, 一般而言我们推荐直接使用 umi 的 request，但是有些时候需要自定义，可以修改 <code>requestLibPath</code> 的配置，比如要使用 utils 的中的 request，我们可以这么配置:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"> openAPI<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    requestLibPath<span class=\"token operator\">:</span> <span class=\"token string\">\"import request from '@utils/request\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 这里使用 copy 的 url</span>\n    schemaPath<span class=\"token operator\">:</span> <span class=\"token string\">\"https://gw.alipayobjects.com/os/antfincdn/M%24jrzTTYJN/oneapi.json\"</span><span class=\"token punctuation\">,</span>\n    mock<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然需要保证 <code>schemaPath</code> 配置引入 request，不然生成的代码可能无法执行。生成的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// requestLibPath 的配置</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'umi'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 获取规则列表 GET /api/rule */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">rule</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params<span class=\"token operator\">:</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>PageParams<span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> any <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>RuleList<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/rule'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>params<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注释也会自动载入，省去了我们查文档的麻烦，同时在 serves 中我们也会生成 <code>typings.d.ts</code> 文件，里面有 openapi 中包含所有定义。<code>API.RuleList</code> 就是后端需要返回的数据的描述，例子如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">RuleListItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    key<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    disabled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    href<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    avatar<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    owner<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    desc<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    callNo<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    status<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    updatedAt<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    createdAt<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    progress<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">RuleList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> RuleListItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/** 列表的内容总数 */</span>\n    total<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    success<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样我们就可以配合 ProTable，快速搞个 CURD。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> rule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/services/ant-design-pro/rule'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 两个泛型，第一个是列表项的类型定义，第二个是查询参数的定义。</span>\n<span class=\"token comment\">// 🥳 一个表格已经生成了</span>\n<span class=\"token operator\">&lt;</span>ProTable<span class=\"token operator\">&lt;</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>RuleListItem<span class=\"token punctuation\">,</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span>PageParams<span class=\"token operator\">></span> request<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>rule<span class=\"token punctuation\">}</span> columns<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>columns<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"mock\" style=\"position:relative;\"><a href=\"#mock\" aria-label=\"mock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mock</h3>\n<p><code>mock</code> 就比较简单了，配置为 true 之后会自动生成一些 mock 的文件，虽然质量不如我们人肉写的，但是在开发中使用已经没问题了。生成的 mock 文件在项目根路径下的 mock 文件中,生成的 mock 数据每次都不同，如果要调试可以随意修改，只有执行 <code>npm run openapi</code> 才会进行修改。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'GET /api/rule'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          key<span class=\"token operator\">:</span> <span class=\"token number\">86</span><span class=\"token punctuation\">,</span>\n          disabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          href<span class=\"token operator\">:</span> <span class=\"token string\">'https://ant.design'</span><span class=\"token punctuation\">,</span>\n          avatar<span class=\"token operator\">:</span> <span class=\"token string\">'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg'</span><span class=\"token punctuation\">,</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'罗秀兰'</span><span class=\"token punctuation\">,</span>\n          owner<span class=\"token operator\">:</span> <span class=\"token string\">'Garcia'</span><span class=\"token punctuation\">,</span>\n          desc<span class=\"token operator\">:</span> <span class=\"token string\">'斯达种整消建难风可却再日等果明此。'</span><span class=\"token punctuation\">,</span>\n          callNo<span class=\"token operator\">:</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span>\n          status<span class=\"token operator\">:</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span>\n          updatedAt<span class=\"token operator\">:</span> <span class=\"token string\">'PpVmJ50'</span><span class=\"token punctuation\">,</span>\n          createdAt<span class=\"token operator\">:</span> <span class=\"token string\">'FbRG'</span><span class=\"token punctuation\">,</span>\n          progress<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      total<span class=\"token operator\">:</span> <span class=\"token number\">98</span><span class=\"token punctuation\">,</span>\n      success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"文档\" style=\"position:relative;\"><a href=\"#%E6%96%87%E6%A1%A3\" aria-label=\"文档 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文档</h3>\n<p>在开发中我们不能只看代码，也是需要的看文档的。Pro 中也默认集成了一下 <code>swagger-ui</code> ，提供了一个界面可以读取当前项目中的 openapi 配置，我们可以在 Layout 右下角找到一个快捷操作:</p>\n<p><img src=\"https://gw.alipayobjects.com/zos/antfincdn/htZYO3ojsm/957C1E97-466B-48aa-B107-FA7C4EFF6971.png\" alt=\"options\"></p>\n<p>这个操作只在开发环境有效。如果是低版本可以访问 <code>/umi/plugin/openapi</code> 来查看，最后的效果应该是这样的:</p>\n<p><img src=\"https://gw.alipayobjects.com/zos/antfincdn/htZYO3ojsm/957C1E97-466B-48aa-B107-FA7C4EFF6971.png\" alt=\"doc\"></p>","tableOfContents":"<ul>\n<li><a href=\"/docs/openapi-cn/#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6\">安装插件</a></li>\n<li>\n<p><a href=\"/docs/openapi-cn/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">如何使用</a></p>\n<ul>\n<li><a href=\"/docs/openapi-cn/#requestlibpath\">requestLibPath</a></li>\n<li><a href=\"/docs/openapi-cn/#mock\">mock</a></li>\n<li><a href=\"/docs/openapi-cn/#%E6%96%87%E6%A1%A3\">文档</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"OpenAPI","order":30,"type":"后端集成"},"fields":{"path":"/docs/openapi.zh-CN.md","slug":"/docs/openapi-cn","modifiedTime":1620370023840,"avatarList":"[]"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"文档总览","order":0,"type":"入门","time":null},"fields":{"slug":"/docs/overview-cn","path":"/docs/overview.zh-CN.md"}}},{"node":{"frontmatter":{"title":"开始使用","order":3,"type":"入门","time":null},"fields":{"slug":"/docs/getting-started-cn","path":"/docs/getting-started.zh-CN.md"}}},{"node":{"frontmatter":{"title":"新手需知","order":4,"type":"入门","time":null},"fields":{"slug":"/docs/introduction-cn","path":"/docs/introduction.zh-CN.md"}}},{"node":{"frontmatter":{"title":"启动项目","order":10,"type":"基础使用","time":null},"fields":{"slug":"/docs/development-cn","path":"/docs/development.zh-CN.md"}}},{"node":{"frontmatter":{"title":"路由和菜单","order":10,"type":"页面开发","time":null},"fields":{"slug":"/docs/router-and-nav-cn","path":"/docs/router-and-nav.zh-CN.md"}}},{"node":{"frontmatter":{"title":"环境变量","order":11,"type":"基础使用","time":null},"fields":{"slug":"/docs/environment-manage-cn","path":"/docs/environment-manage.zh-CN.md"}}},{"node":{"frontmatter":{"title":"布局","order":11,"type":"页面开发","time":null},"fields":{"slug":"/docs/layout-cn","path":"/docs/layout.zh-CN.md"}}},{"node":{"frontmatter":{"title":"图表","order":15,"type":"页面开发","time":null},"fields":{"slug":"/docs/graph-cn","path":"/docs/graph.zh-CN.md"}}},{"node":{"frontmatter":{"title":"新增页面","order":16,"type":"页面开发","time":null},"fields":{"slug":"/docs/new-page-cn","path":"/docs/new-page.zh-CN.md"}}},{"node":{"frontmatter":{"title":"简易数据流","order":19,"type":"数据管理","time":null},"fields":{"slug":"/docs/simple-model-cn","path":"/docs/simple-model.zh-CN.md"}}},{"node":{"frontmatter":{"title":"使用 css","order":20,"type":"样式和资源","time":null},"fields":{"slug":"/docs/css-cn","path":"/docs/css.zh-CN.md"}}},{"node":{"frontmatter":{"title":"文件夹结构","order":21,"type":"基础使用","time":null},"fields":{"slug":"/docs/folder-cn","path":"/docs/folder.zh-CN.md"}}},{"node":{"frontmatter":{"title":"CSS Modules","order":22,"type":"样式和资源","time":null},"fields":{"slug":"/docs/css-modules-cn","path":"/docs/css-modules.zh-CN.md"}}},{"node":{"frontmatter":{"title":"使用 less","order":23,"type":"样式和资源","time":null},"fields":{"slug":"/docs/less-cn","path":"/docs/less.zh-CN.md"}}},{"node":{"frontmatter":{"title":"添加图片，字体和文件","order":24,"type":"样式和资源","time":null},"fields":{"slug":"/docs/adding-images-fonts-and-files-cn","path":"/docs/adding-images-fonts-and-files.zh-CN.md"}}},{"node":{"frontmatter":{"title":"OpenAPI","order":30,"type":"后端集成","time":null},"fields":{"slug":"/docs/openapi-cn","path":"/docs/openapi.zh-CN.md"}}},{"node":{"frontmatter":{"title":"权限管理","order":30,"type":"数据管理","time":null},"fields":{"slug":"/docs/authority-management-cn","path":"/docs/authority-management.zh-CN.md"}}},{"node":{"frontmatter":{"title":"标题和加载页","order":30,"type":"构建和部署","time":null},"fields":{"slug":"/docs/title-landing-cn","path":"/docs/title-landing.zh-CN.md"}}},{"node":{"frontmatter":{"title":"Pro 资产的使用","order":30,"type":"高级使用","time":null},"fields":{"slug":"/docs/assets-cn","path":"/docs/assets.zh-CN.md"}}},{"node":{"frontmatter":{"title":"网络请求","order":31,"type":"后端集成","time":null},"fields":{"slug":"/docs/request-cn","path":"/docs/request.zh-CN.md"}}},{"node":{"frontmatter":{"title":"构建","order":31,"type":"构建和部署","time":null},"fields":{"slug":"/docs/build-cn","path":"/docs/build.zh-CN.md"}}},{"node":{"frontmatter":{"title":"Lint","order":31,"type":"编码规范","time":null},"fields":{"slug":"/docs/lint-cn","path":"/docs/lint.zh-CN.md"}}},{"node":{"frontmatter":{"title":"TypeScript","order":31,"type":"编码规范","time":null},"fields":{"slug":"/docs/type-script-cn","path":"/docs/typeScript.zh-CN.md"}}},{"node":{"frontmatter":{"title":"国际化","order":31,"type":"高级使用","time":null},"fields":{"slug":"/docs/i18n-cn","path":"/docs/i18n.zh-CN.md"}}},{"node":{"frontmatter":{"title":"代理","order":32,"type":"后端集成","time":null},"fields":{"slug":"/docs/proxy-cn","path":"/docs/proxy.zh-CN.md"}}},{"node":{"frontmatter":{"title":"全局初始数据","order":32,"type":"数据管理","time":null},"fields":{"slug":"/docs/initial-state-cn","path":"/docs/initial-state.zh-CN.md"}}},{"node":{"frontmatter":{"title":"部署","order":32,"type":"构建和部署","time":null},"fields":{"slug":"/docs/deploy-cn","path":"/docs/deploy.zh-CN.md"}}},{"node":{"frontmatter":{"title":"菜单的高级用法","order":32,"type":"高级使用","time":null},"fields":{"slug":"/docs/advanced-menu-cn","path":"/docs/advanced-menu.zh-CN.md"}}},{"node":{"frontmatter":{"title":"测试","order":32,"type":"高级使用","time":null},"fields":{"slug":"/docs/test-cn","path":"/docs/test.zh-CN.md"}}},{"node":{"frontmatter":{"title":"调试","order":34,"type":"后端集成","time":null},"fields":{"slug":"/docs/debug-cn","path":"/docs/debug.zh-CN.md"}}},{"node":{"frontmatter":{"title":"常见问题","order":91,"type":"其它","time":null},"fields":{"slug":"/docs/faq-cn","path":"/docs/faq.zh-CN.md"}}},{"node":{"frontmatter":{"title":"升级到 V5","order":92,"type":"其它","time":null},"fields":{"slug":"/docs/upgrade-v5-cn","path":"/docs/upgrade-v5.zh-CN.md"}}},{"node":{"frontmatter":{"title":"设计资源","order":94,"type":"其它","time":null},"fields":{"slug":"/docs/resource-cn","path":"/docs/resource.zh-CN.md"}}}]}},"pageContext":{"slug":"/docs/openapi-cn","type":"/docs/","locale":"/-cn/"}},"staticQueryHashes":[]}